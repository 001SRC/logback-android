<?xml version="1.0"?>
<document>

	<properties>
		<author email="ceki at qos ddoott ch ">Ceki Gulcu</author>
		<title>${pom.name} index</title>
	</properties>

	<body>

		<div class="section">
			<h2>Logback Core Module</h2>
		</div>

		<p>
			Logback: the generic, reliable, fast and flexible logging
			library for Java
		</p>

		<p>
			The core module lays the groundwork for the <a href="../classic/">Classic</a> and
			<a  href="../access/">Access</a> modules. Logback core defines the concepts of
			Context, Status and StatusManager, Appender, Layout and
			Filter. The logback Context acts as a store to logback
			components. It is the core of the logging library Components
			can store objects and properties in the Context using
			key-value couples.
		</p>
		<p>
			Statuses are logback's own logging system. When a component
			sees some important event happening, it will report the
			event to the StatusManager, using Info, Warn and Error
			Statuses. Nesting Statuses is possible, so that the
			components can create a tree of reported events. An error
			and the actions taken based on the error is an example of
			Status tree. The logback Context maintains an instance of
			StatusManager.
		</p>
		<p>
			An Appender can be seen as an output destination. Logback
			allows logging requests to print to multiple destinations.
			Appenders exists for the console, files, databases and many
			other targets. It is very easy to write your own
			implementation of an Appender, to fit to your personal use.
			More often than not, users wish to customize not only the
			output destination but also the output format. This is
			accomplished by associating a Layout with an Appender. The
			Layout is responsible for formatting the logging request
			according to the user's wishes, whereas an appender takes
			care of sending the formatted output to its destination.
		</p>
		<p>
			Logging requests are filtered in several ways. Filters are
			one of them. Used to deal with more specialized cases,
			logback Filters are a generic yet powerful mechanism.
			Largely inspired from Linux ipchains or iptables, they are
			based on ternary logic, allowing them to be chained together
			to compose an arbitrarily complex filtering policy. The
			logback Context maintains a Filter list.
		</p>
	</body>
</document>